[package]
name = "zallet"
version = "0.0.0"
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
description = "A prototype wallet. Don't rely on this for privacy or with significant funds yet!"
license.workspace = true
categories.workspace = true

[package.metadata.deb]
name = "zallet"
extended-description = """\
Zallet is a Zcash full node wallet, designed to replace the legacy wallet that \
was included within zcashd."""
section = "utils"
assets = [
    ["target/release/zallet", "usr/bin/", "755"],

    # From the bash-completion FAQ (https://github.com/scop/bash-completion/blob/master/README.md#faq):
    # > Q. I author/maintain package X and would like to maintain my own completion code
    # >    for this package. Where should I put it to be sure that interactive bash shells
    # >    will find it and source it?
    # > A. Install it in one of the directories pointed to by bash-completion's `pkgconfig`
    # >    file variables. [..] The recommended directory is `completionsdir`, which you
    # >    can get with `pkg-config --variable=completionsdir bash-completion`.
    #
    # On Ubuntu 22.04 this resolves to `/usr/share/bash-completion/completions`.
    ["target/release/completions/zallet.bash", "usr/share/bash-completion/completions/zallet", "644"],

    # From https://github.com/elves/elvish/issues/1564#issuecomment-1166333636:
    # > Completion files can be installed like other modules into a global module search
    # > directory ([..]). There is no automatic discovery of completion files though; the
    # > user would have to import them manually with `use`.
    #
    # From https://elv.sh/ref/command.html#module-search-directories:
    # > When importing modules, Elvish searches the following directories:
    # > [..]
    # > 3. If the XDG_DATA_DIRS environment variable is defined and non-empty, it is
    # >    treated as a colon-delimited list of paths (semicolon-delimited on Windows),
    # >    which are all searched.
    # >
    # >    Otherwise, `/usr/local/share/elvish/lib` and `/usr/share/elvish/lib` are
    # >    searched on non-Windows OSes.
    ["target/release/completions/zallet.elv", "usr/share/elvish/lib/", "644"],

    # From https://fishshell.com/docs/current/completions.html#where-to-put-completions:
    # > By default, Fish searches the following for completions, using the first available
    # > file that it finds:
    # > [..]
    # > - A directory for third-party software vendors to ship their own completions for
    # >   their software, usually `/usr/share/fish/vendor_completions.d`;
    # > [..]
    # > If you are developing another program and would like to ship completions with your
    # > program, install them to the “vendor” completions directory. As this path may vary
    # > from system to system, the `pkgconfig` framework should be used to discover this
    # > path with the output of `pkg-config --variable completionsdir fish`.
    ["target/release/completions/zallet.fish", "usr/share/fish/vendor_completions.d/", "644"],

    # The best reference I can find for the Zsh completions path is
    # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=921236#17 from February 2019:
    # > As a rule, completion functions (first line is "#compdef") should be
    # > installed to /usr/share/zsh/vendor-completions and autoloadable
    # > functions (first line is "#autoload") to /usr/share/zsh/vendor-functions;
    # > both of these paths are Debian-specific.
    ["target/release/completions/_zallet", "usr/share/zsh/vendor-completions/", "644"],

    # From the default `/etc/manpath.config` created by the `man-db` package:
    # > MANPATH_MAP     /usr/bin                /usr/share/man
    ["target/release/manpages/**/zallet.1.gz", "usr/share/man/", "644"],

    ["../README.md", "usr/share/doc/zallet/README.md", "644"],
]

[dependencies]
abscissa_core.workspace = true
abscissa_tokio.workspace = true
async-trait.workspace = true
clap = { workspace = true, features = ["string", "unstable-styles"] }
deadpool.workspace = true
deadpool-sqlite.workspace = true
deadpool-sync.workspace = true
futures.workspace = true
hex.workspace = true
home.workspace = true
http-body-util.workspace = true
hyper.workspace = true
i18n-embed = { workspace = true, features = ["desktop-requester"] }
i18n-embed-fl.workspace = true
jsonrpsee = { workspace = true, features = ["macros", "server"] }
known-folders.workspace = true
orchard.workspace = true
rand.workspace = true
rusqlite.workspace = true
rust-embed.workspace = true
sapling.workspace = true
schemerz.workspace = true
secrecy.workspace = true
serde.workspace = true
serde_json.workspace = true
shardtree.workspace = true
tokio = { workspace = true, features = ["fs", "io-util", "rt-multi-thread"] }
toml.workspace = true
tonic.workspace = true
tower = { workspace = true, features = ["timeout"] }
transparent.workspace = true
xdg.workspace = true
zaino-state.workspace = true
zcash_address.workspace = true
zcash_client_backend = { workspace = true, features = [
    "lightwalletd-tonic-tls-webpki-roots",
    "orchard",
    "sync",
    "transparent-inputs",
] }
zcash_client_sqlite = { workspace = true, features = [
    "orchard",
    "transparent-inputs",
] }
zcash_keys.workspace = true
zcash_primitives.workspace = true
zcash_protocol = { workspace = true, features = ["local-consensus"] }
zip32.workspace = true

[build-dependencies]
clap = { workspace = true, features = ["string", "unstable-styles"] }
clap_complete = "4"
clap_mangen = "0.2"
flate2 = "1"
i18n-embed.workspace = true
i18n-embed-fl.workspace = true
rust-embed.workspace = true

[dev-dependencies]
abscissa_core = { workspace = true, features = ["testing"] }
once_cell = "1.2"

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(outside_buildscript)'] }
