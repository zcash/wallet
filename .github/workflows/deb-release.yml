name: Build and deploy Debian packages

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  release:
    name: Build and deploy Zallet ${{ matrix.name }} package to apt.z.cash
    runs-on: ubuntu-latest
    container:
      image: "rust:${{ matrix.debian }}"

    strategy:
      matrix:
        name:
          - bullseye-amd64
          - bookworm-amd64

        include:
          - name: bullseye-amd64
            debian: bullseye
            arch: amd64
            target: x86_64-unknown-linux-gnu

          - name: bookworm-amd64
            debian: bookworm
            arch: amd64
            target: x86_64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Ensure we build with latest stable Rust
        run: rm rust-toolchain.toml

      - name: Install gcloud SDK
        shell: bash
        run: |
          apt-get update && apt-get install -y curl python3 python3-distutils lsb-release apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" \
            | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \
            | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          apt-get update && apt-get install -y google-cloud-sdk

      - name: Install depends
        shell: bash
        run: |
          apt-get update && \
          apt-get install -y --no-install-recommends \
          libclang-dev \
          aptly

      - name: Authenticate with gcloud using process substitution
        shell: bash
        run: |
          gcloud auth activate-service-account --key-file=<(echo "${{ secrets.GCP_SA_KEY }}" | base64 -d)

      - name: Download file from GCS
        shell: bash
        run: gsutil -q cp gs://${{ secrets.GCP_PROJECT_ID_PROD }}-apt-packages/encrypted_gpg.kms encrypted_gpg.kms

      - name: Decrypt file using KMS
        shell: bash
        run: |
          gcloud kms decrypt \
            --key gpg \
            --project ${{ secrets.GCP_PROJECT_ID_PROD }} \
            --keyring gpg \
            --location global \
            --plaintext-file private.pgp \
            --ciphertext-file encrypted_gpg.kms

      - name: Import GPG
        shell: bash    
        run: |
          gpg --import private.pgp
          wget -qO - https://apt.z.cash/zcash.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build package
        shell: bash
        run: |
          cargo deb

      - name: Rename package to not collide across the matrix
        shell: bash
        run: |
          mv target/debian/zallet_*.deb ./
          mv zallet_*.deb "$(basename -s .deb zallet_*.deb)_${{ matrix.debian }}.deb"

      - name: Mirror apt.z.cash
        shell: bash
        run: |
          aptly mirror create zcash https://apt.z.cash ${{ matrix.debian }}

      - name: Create local snapshot of apt.z.cash with zallet
        shell: bash
        run: |
          aptly repo create --distribution ${{ matrix.debian }} --component main zcash_local
          aptly repo add zcash_local zallet_*.deb
          aptly mirror update zcash
          aptly snapshot create snapshot_zcash from mirror zcash
          aptly snapshot create snapshot_local from repo zcash_local
          aptly snapshot merge snapshot_combined snapshot_zcash snapshot_local

      - name: Sign & publish snapshot of local apt repository
        shell: bash
        run: |
          export key=$(gpg --list-secret-keys --keyid-format=long sysadmin@z.cash | head -n 2 | grep -v sec)
          aptly publish snapshot -architectures=${{ matrix.arch }} -gpg-key="$key" snapshot_combined

      - name: Upload snapshot to the apt.z.cash bucket for approval
        run: |
          gsutil -q -m rsync -r $HOME/.aptly/public/pool/main/z/zallet/ gs://${{ secrets.GCP_PROJECT_ID_PROD }}-apt-server/pool/main/z/zallet/
          gsutil -q -m rsync -r $HOME/.aptly/public/dists/ gs://${{ secrets.GCP_PROJECT_ID_PROD }}-apt-server/dists/

      - name: Prepare Signature artifacts
        run: |
          mkdir artifacts
          mv zallet_*.deb artifacts/
          cd artifacts
          gpg -u sysadmin@z.cash --armor --digest-algo SHA256 --detach-sign zallet_*.deb

      - name: Upload to Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836
        with:
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
